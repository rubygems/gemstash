# frozen_string_literal: true

require "fileutils"
require "pathname"

# Helper class for running pandoc
class Doc
  def run
    check_for_pandoc
    check_for_groff
    convert_docs
  end

  def check_for_pandoc
    return if which?("pandoc")

    abort("You need to install pandoc to generate documentation")
  end

  def check_for_groff
    return if which?("groff")

    abort("You need to install groff to generate documentation")
  end

  def which?(exe)
    ENV["PATH"].split(::File::PATH_SEPARATOR).any? do |file|
      path = ::File.join(file, exe)
      ::File.exist?(path) && ::File.executable?(path)
    end
  end

  def convert_docs
    Dir[root_dir.join("man/*.md")].each do |file|
      file = Doc::File.new(self, file)
      file.export_to_github
      file.export_to_man_and_txt
      file.export_to_html
    end

    FileUtils.cp(root_dir.join("gemstash.png"), root_dir.join("html/gemstash.png"))
  end

  def root_dir
    @root_dir ||= Pathname.new(::File.expand_path("..", __dir__))
  end

  # Represents a single documentation file being converted
  class File
    attr_reader :doc, :file, :base_file

    def initialize(doc, file)
      @doc = doc
      @file = file
      @base_file = ::File.basename(file)
    end

    def export_to_github
      path = if base_file == "gemstash-readme.7.md"
        doc.root_dir.join("README.md")
      else
        to_extension(".md")
      end

      export "gfm", export_path("docs", path)
    end

    def system(command)
      puts command
      Kernel.system(command)
    end

    def export_to_man_and_txt
      path = export_path("lib/gemstash/man", to_extension(""))
      export "man", path
      system "groff -Wall -mtty-char -mandoc -Tascii #{path} | col -b > #{path}.txt"
    end

    def export_to_html
      path = if base_file == "gemstash-readme.7.md"
        "index.html"
      else
        to_extension(".html")
      end

      export "html", export_path("html", path)
    end

    def export(format, to_file)
      system "pandoc -s -f markdown -t #{format} -o '#{to_file}' '#{file}'"
      content = ::File.read(to_file)
      content.gsub!("](./", "](docs/")
      content.gsub!(/\A---(.|\n)*?---/, "")
      prefix = format == "man" ? "" : "<!-- Automatically generated by Pandoc -->\n"
      ::File.write to_file, "#{prefix}#{content}"
    end

    def export_path(dir, filename)
      path = doc.root_dir.join(dir)
      path.mkpath
      path.join(filename)
    end

    def to_extension(ext)
      base_file.sub(/\.[^.]*\z/, ext)
    end
  end
end
